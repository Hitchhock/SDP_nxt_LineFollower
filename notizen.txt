        NOTLAR
Licht_sensor: siyah= 35  beyaz= 66  gri = 57


- task main() {...}: Jedes Programm benötigt einen main-Task

- Kommentare werden durch // eingeleitet

- TextOut(x, y, text): Gibt text an der Position (x, y) auf dem Display aus

- Wait(x): warte für x Millisekunden

- SetSensorLight(x): definiere x als Lichtsensor

- ClearScreen(): lösche die Anzeige des NXT

- NumOut(x, y, z): zeige Nummer z an Position (x, y) auf dem Display des NXT an

- Sensor(x): Wert von Sensor an Eingang x

- OnFwd(x, y): starte Vorwärtsgang auf Motor x mit y % der Maximalgeschwindigkeit

- OnRev(x, y): gleich wie OnFwd, nur rückwärts

-Off(x): stoppe Motor x

# Ausgänge: OUT_A, OUT_B, OUT_C, OUT_AB, OUT_AC

# Variablen: int (Ganze Zahl), float (Gleitkommazahl), bool (true oder false)

# ==,!=, <, <=, >, !, &&, ||
Gleichheit, Ungleichheit, kleiner, kleiner oder gleich, größer, Negierung, und, oder

# if (Bedingung) {code1} else {code2}:

# while (Bedingung) {code}: wiederhole die Ausführung von code solange Bedingung erfüllt ist

# Preprocessor Directives :  Beispiel: #define x y gibt y den Namen x  #define THRESHOLD 30



+ GELEN DEGERLERI EKRANA YAZDIRA ICIN
task main()
{
    SetSensorLight(IN_1);
    ClearScreen();
    NumOut(60, LCD_LINE1, Sensor(IN_1));
    Wait(2000);
}

+ MOTORA 5 SANIYE GUC VERME
task main()
{
    OnFwd(OUT_A, -100);
    Wait(5000);
    Off(OUT_A);
}

+ Variablen speichern Werte
task main()
{
    SetSensorLight(IN_1);
    int lightSensorValue = Sensor(IN_1);
    bool isOnTable = lightSensorValue < 50;
    const float pi = 3.14159;
}

+ Verknüpfung
bool inRange = Sensor(IN_1) < 30 && Sensor(IN_2) >= 80

+ Bedingte Ausführung
: task main()
{
    SetSensorTouch(IN_2);
    if(Sensor(IN_2) != 1)
    {
    TextOut(0, 0, "Alles klar!");
    }
    else
    {
    TextOut(0, 0, "Hilfe, Unfall!");
    }
    Wait(5000);
 }


 + Beispiel
#define THRESHOLD 30 // Wert in Prozent
#define STATE_INIT 0
#define STATE_SAFE_ON_TABLE 1
#define STATE_DETECTED_EDGE 2

int initialize()
{
    SetSensorLight(IN_1);
    return STATE_SAFE_ON_TABLE;

}

int drive()
 {
    OnFwd(OUT_AC, 50);
    if (Sensor(IN_1) <= THRESHOLD){
    return STATE_DETECTED_EDGE;
 }
    return STATE_SAFE_ON_TABLE;
 }
 int turnAround()
 {
    Off(OUT_AC);
    OnRev(OUT_C, 100);
    Wait(800);
    return STATE_SAFE_ON_TABLE;
 }

int state = STATE_INIT;
task main()
    {
    while(true)
        {
        if (state == STATE_INIT){
            state = initialize();
        }
        if (state == STATE_SAFE_ON_TABLE){
            state = drive();
        }
        if (state == STATE_DETECTED_EDGE){
            state = turnAround();
        }
    }
}
