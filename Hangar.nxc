

void drive(int A, int B)
{
 /*
   direct command for physical motors
   ** easiest use over turn
 */
 OnFwd(OUT_A, -A);
 OnFwd(OUT_B, -B);
};

void turn (int a, int v)
{
 /*
   enables direct control over speed and degree of turn
   ** translates degree of turn into speed for each motor
   ** implements turn by accessing the drive() function
 */
 if (a>10){
    v = 50;
 }
 float motA = v + a;
 float motB = v - a;
 
 drive(motA, motB);
}

void accTurn (int directionValue, int time, int velocity){ //accelerating turn function
  // take turn sharper the longer it turns??
  if(directionValue == 0){
    drive(velocity, velocity);
  }
  else{
    //drive(velocity + directionValue*15*(log(time) + 1), velocity - directionValue*15*(log(time)+1)); -> doesnt take the log???
    // directionValue*15 instead of the (a) term in "turn"
    // log(time)+ 1 will (in the best case) slowly increase -> increase difference in velocity
    drive(velocity + directionValue*(15 + time), velocity - directionValue*(15 + time));
  }
};

float sensorUS ()
{
 /*
   !! not in use yet
   enables use / read of US (Ultraschall) sensor
 */
 SetSensorLowspeed(IN_4);
 return SensorUS(IN_4);
 ClearScreen();
 NumOut(60, LCD_LINE1, IN_4);
 Wait(500);
};

float sensor1 ()
{
 /*
   enables use / read of the first sensor
   ** the sensor the furthest to the right
 */
 SetSensorLight(IN_1);
 return Sensor(IN_1);
};

float sensor2 ()
{
 /*
   enables use / read of the second sensor
   ** the sensor the furthest to the left
 */
 SetSensorLight(IN_2);
 return Sensor(IN_2);
};

float sensor3 ()
{
 /*
   enables use / read of the third sensor
   ** the sensor in the centre
 */
 SetSensorLight(IN_3);
 return Sensor(IN_3);
};

float getRelativeSensorLights()
{
 /*
   outputs a float relative depending on the measurements of the ligtht-sensors
   ** output "a" is then used as a measure for the degree of turn
   ** "a" is positive for left-hand turn and negative for a right-hand turn
 */
 int Abweichung = 0.05;
 float sR = sensor1();
 float sL = sensor2();
 float sM = sensor3();

 
 float abRM = sR - sM;
 float abLM = sL - sM;
 float a = abRM - abLM;

 return a;
};

float turnAround()
{
 /*
   enables the vehicle to turn around
   ** it will first turn for a specified number of seconds
   ** afterwards it will keep turning until one light-sensor "sees" the line
   ** it will then stop and the main program of following the line starts
 */
 turn(50, 0);
 Wait(5);
 while (true)
 {
  float winkel =  abs(getRelativeSensorLights());
  NumOut(60, LCD_LINE1, winkel);
  if (winkel > 20){
     turn(0,0);
     break;
  }
  turn(50,0);
 }
};

int directionValue(){
  /*gives Values for direction.
    left, no change, right
    1     0           -1
  */
  float sensorValue = getRelativeSensorLights();
  if(sensorValue > 17){
    return 1;
  }
  else{
    if(sensorValue < -17){
      return -1;
    }
  }
  return 0;
}

void followLine()
{
 /*
   enables the vehicle to follow the line
   ** a while loop during which the car follows the line
   ** getRelativeSensorLights() is used to get the degree of turn from the sensor lights
   ** this degree of turn will then be translated into a physical output by turn()
 */
 int i = 0;

 //! while(i < 1000)
 while(true)
 {
  float winkel = getRelativeSensorLights();
  turn(winkel, 50);
  // i++;
 }
};

void howLongBreaks(int v){
	/*
       Counts ticks while not following black line (dependent on speed)
	*/
  int firstTick;
  int lastTick;
	float startSensor = sensor3();
	while(true){
		drive(v,v);
    if(sensor3() > startSensor*1.2){
			firstTick = CurrentTick();
			break;
		}
	}
	while(true){
		drive(v,v);
    if(sensor3() < startSensor*1.2){
      lastTick = CurrentTick();
      break;
		}
	}
	drive(0,0);
	NumOut(60, LCD_LINE1, lastTick-firstTick);
	Wait(5000);
};

task main()
{
 // howLongBreaks(80);
 // turnAround();
 
 followLine();
 /*
 while(true){
  float winkel = getRelativeSensorLights();
  NumOut(60, LCD_LINE1, winkel);
  Wait(700);
 }
 */

}
